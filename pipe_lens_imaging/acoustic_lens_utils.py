import numpy as np

def convert_parameters(c, wc, R, v1, v2):
    z0 = -(2 * c * v2 - v1 * v2 * (((2 * c - (
            v1 ** 2 * wc ** 2 - v2 ** 2 * wc ** 2 + R ** 2 * v1 ** 2 - R ** 2 * v2 ** 2 + R * v2 * (
            - R ** 2 * v1 ** 2 + R ** 2 * v2 ** 2 - 2 * R * v1 ** 2 * wc + 2 * R * v2 ** 2 * wc + 4 * c ** 2 * v1 ** 2 - v1 ** 2 * wc ** 2 + v2 ** 2 * wc ** 2) ** (
                    1 / 2) + v2 * wc * (
                    - R ** 2 * v1 ** 2 + R ** 2 * v2 ** 2 - 2 * R * v1 ** 2 * wc + 2 * R * v2 ** 2 * wc + 4 * c ** 2 * v1 ** 2 - v1 ** 2 * wc ** 2 + v2 ** 2 * wc ** 2) ** (
                    1 / 2) + 2 * R * v1 ** 2 * wc - 2 * R * v2 ** 2 * wc) / (2 * c * v1 ** 2)) ** 2 - (
                                            v1 ** 2 * (v2 ** 2 / v1 ** 2 - 1) * ((R + wc) ** 2 - c ** 2 + (c - (
                                            v1 ** 2 * wc ** 2 - v2 ** 2 * wc ** 2 + R ** 2 * v1 ** 2 - R ** 2 * v2 ** 2 + R * v2 * (
                                            - R ** 2 * v1 ** 2 + R ** 2 * v2 ** 2 - 2 * R * v1 ** 2 * wc + 2 * R * v2 ** 2 * wc + 4 * c ** 2 * v1 ** 2 - v1 ** 2 * wc ** 2 + v2 ** 2 * wc ** 2) ** (
                                                    1 / 2) + v2 * wc * (
                                                    - R ** 2 * v1 ** 2 + R ** 2 * v2 ** 2 - 2 * R * v1 ** 2 * wc + 2 * R * v2 ** 2 * wc + 4 * c ** 2 * v1 ** 2 - v1 ** 2 * wc ** 2 + v2 ** 2 * wc ** 2) ** (
                                                    1 / 2) + 2 * R * v1 ** 2 * wc - 2 * R * v2 ** 2 * wc) / (
                                                                                                                   2 * c * v1 ** 2)) ** 2 - (
                                                                                         v1 ** 2 * wc ** 2 - v2 ** 2 * wc ** 2 + R ** 2 * v1 ** 2 - R ** 2 * v2 ** 2 + R * v2 * (
                                                                                         - R ** 2 * v1 ** 2 + R ** 2 * v2 ** 2 - 2 * R * v1 ** 2 * wc + 2 * R * v2 ** 2 * wc + 4 * c ** 2 * v1 ** 2 - v1 ** 2 * wc ** 2 + v2 ** 2 * wc ** 2) ** (
                                                                                                 1 / 2) + v2 * wc * (
                                                                                                 - R ** 2 * v1 ** 2 + R ** 2 * v2 ** 2 - 2 * R * v1 ** 2 * wc + 2 * R * v2 ** 2 * wc + 4 * c ** 2 * v1 ** 2 - v1 ** 2 * wc ** 2 + v2 ** 2 * wc ** 2) ** (
                                                                                                 1 / 2) + 2 * R * v1 ** 2 * wc - 2 * R * v2 ** 2 * wc) ** 2 / (
                                                                                         4 * c ** 2 * v1 ** 4)) ** 2) / (
                                            4 * c ** 2 * v2 ** 2)) ** (1 / 2) / v1 + ((
                                                                                              v1 ** 2 * wc ** 2 - v2 ** 2 * wc ** 2 + R ** 2 * v1 ** 2 - R ** 2 * v2 ** 2 + R * v2 * (
                                                                                              - R ** 2 * v1 ** 2 + R ** 2 * v2 ** 2 - 2 * R * v1 ** 2 * wc + 2 * R * v2 ** 2 * wc + 4 * c ** 2 * v1 ** 2 - v1 ** 2 * wc ** 2 + v2 ** 2 * wc ** 2) ** (
                                                                                                      1 / 2) + v2 * wc * (
                                                                                                      - R ** 2 * v1 ** 2 + R ** 2 * v2 ** 2 - 2 * R * v1 ** 2 * wc + 2 * R * v2 ** 2 * wc + 4 * c ** 2 * v1 ** 2 - v1 ** 2 * wc ** 2 + v2 ** 2 * wc ** 2) ** (
                                                                                                      1 / 2) + 2 * R * v1 ** 2 * wc - 2 * R * v2 ** 2 * wc) ** 2 / (
                                                                                              4 * c ** 2 * v1 ** 4) - (
                                                                                              v1 ** 2 * (
                                                                                              v2 ** 2 / v1 ** 2 - 1) * (
                                                                                                      (
                                                                                                              R + wc) ** 2 - c ** 2 + (
                                                                                                              c - (
                                                                                                              v1 ** 2 * wc ** 2 - v2 ** 2 * wc ** 2 + R ** 2 * v1 ** 2 - R ** 2 * v2 ** 2 + R * v2 * (
                                                                                                              - R ** 2 * v1 ** 2 + R ** 2 * v2 ** 2 - 2 * R * v1 ** 2 * wc + 2 * R * v2 ** 2 * wc + 4 * c ** 2 * v1 ** 2 - v1 ** 2 * wc ** 2 + v2 ** 2 * wc ** 2) ** (
                                                                                                                      1 / 2) + v2 * wc * (
                                                                                                                      - R ** 2 * v1 ** 2 + R ** 2 * v2 ** 2 - 2 * R * v1 ** 2 * wc + 2 * R * v2 ** 2 * wc + 4 * c ** 2 * v1 ** 2 - v1 ** 2 * wc ** 2 + v2 ** 2 * wc ** 2) ** (
                                                                                                                      1 / 2) + 2 * R * v1 ** 2 * wc - 2 * R * v2 ** 2 * wc) / (
                                                                                                                      2 * c * v1 ** 2)) ** 2 - (
                                                                                                              v1 ** 2 * wc ** 2 - v2 ** 2 * wc ** 2 + R ** 2 * v1 ** 2 - R ** 2 * v2 ** 2 + R * v2 * (
                                                                                                              - R ** 2 * v1 ** 2 + R ** 2 * v2 ** 2 - 2 * R * v1 ** 2 * wc + 2 * R * v2 ** 2 * wc + 4 * c ** 2 * v1 ** 2 - v1 ** 2 * wc ** 2 + v2 ** 2 * wc ** 2) ** (
                                                                                                                      1 / 2) + v2 * wc * (
                                                                                                                      - R ** 2 * v1 ** 2 + R ** 2 * v2 ** 2 - 2 * R * v1 ** 2 * wc + 2 * R * v2 ** 2 * wc + 4 * c ** 2 * v1 ** 2 - v1 ** 2 * wc ** 2 + v2 ** 2 * wc ** 2) ** (
                                                                                                                      1 / 2) + 2 * R * v1 ** 2 * wc - 2 * R * v2 ** 2 * wc) ** 2 / (
                                                                                                              4 * c ** 2 * v1 ** 4)) ** 2) / (
                                                                                              4 * c ** 2 * v2 ** 2)) ** (
                                           1 / 2) / v2)) / (v1 - v2)
    r0 = 2 * c + (2 * c * v2 - v1 * v2 * (((2 * c - (
            v1 ** 2 * wc ** 2 - v2 ** 2 * wc ** 2 + R ** 2 * v1 ** 2 - R ** 2 * v2 ** 2 + R * v2 * (
            - R ** 2 * v1 ** 2 + R ** 2 * v2 ** 2 - 2 * R * v1 ** 2 * wc + 2 * R * v2 ** 2 * wc + 4 * c ** 2 * v1 ** 2 - v1 ** 2 * wc ** 2 + v2 ** 2 * wc ** 2) ** (
                    1 / 2) + v2 * wc * (
                    - R ** 2 * v1 ** 2 + R ** 2 * v2 ** 2 - 2 * R * v1 ** 2 * wc + 2 * R * v2 ** 2 * wc + 4 * c ** 2 * v1 ** 2 - v1 ** 2 * wc ** 2 + v2 ** 2 * wc ** 2) ** (
                    1 / 2) + 2 * R * v1 ** 2 * wc - 2 * R * v2 ** 2 * wc) / (2 * c * v1 ** 2)) ** 2 - (
                                                   v1 ** 2 * (v2 ** 2 / v1 ** 2 - 1) * (
                                                   (R + wc) ** 2 - c ** 2 + (c - (
                                                   v1 ** 2 * wc ** 2 - v2 ** 2 * wc ** 2 + R ** 2 * v1 ** 2 - R ** 2 * v2 ** 2 + R * v2 * (
                                                   - R ** 2 * v1 ** 2 + R ** 2 * v2 ** 2 - 2 * R * v1 ** 2 * wc + 2 * R * v2 ** 2 * wc + 4 * c ** 2 * v1 ** 2 - v1 ** 2 * wc ** 2 + v2 ** 2 * wc ** 2) ** (
                                                           1 / 2) + v2 * wc * (
                                                           - R ** 2 * v1 ** 2 + R ** 2 * v2 ** 2 - 2 * R * v1 ** 2 * wc + 2 * R * v2 ** 2 * wc + 4 * c ** 2 * v1 ** 2 - v1 ** 2 * wc ** 2 + v2 ** 2 * wc ** 2) ** (
                                                           1 / 2) + 2 * R * v1 ** 2 * wc - 2 * R * v2 ** 2 * wc) / (
                                                                                     2 * c * v1 ** 2)) ** 2 - (
                                                           v1 ** 2 * wc ** 2 - v2 ** 2 * wc ** 2 + R ** 2 * v1 ** 2 - R ** 2 * v2 ** 2 + R * v2 * (
                                                           - R ** 2 * v1 ** 2 + R ** 2 * v2 ** 2 - 2 * R * v1 ** 2 * wc + 2 * R * v2 ** 2 * wc + 4 * c ** 2 * v1 ** 2 - v1 ** 2 * wc ** 2 + v2 ** 2 * wc ** 2) ** (
                                                                   1 / 2) + v2 * wc * (
                                                                   - R ** 2 * v1 ** 2 + R ** 2 * v2 ** 2 - 2 * R * v1 ** 2 * wc + 2 * R * v2 ** 2 * wc + 4 * c ** 2 * v1 ** 2 - v1 ** 2 * wc ** 2 + v2 ** 2 * wc ** 2) ** (
                                                                   1 / 2) + 2 * R * v1 ** 2 * wc - 2 * R * v2 ** 2 * wc) ** 2 / (
                                                           4 * c ** 2 * v1 ** 4)) ** 2) / (
                                                   4 * c ** 2 * v2 ** 2)) ** (1 / 2) / v1 + ((
                                                                                                     v1 ** 2 * wc ** 2 - v2 ** 2 * wc ** 2 + R ** 2 * v1 ** 2 - R ** 2 * v2 ** 2 + R * v2 * (
                                                                                                     - R ** 2 * v1 ** 2 + R ** 2 * v2 ** 2 - 2 * R * v1 ** 2 * wc + 2 * R * v2 ** 2 * wc + 4 * c ** 2 * v1 ** 2 - v1 ** 2 * wc ** 2 + v2 ** 2 * wc ** 2) ** (
                                                                                                             1 / 2) + v2 * wc * (
                                                                                                             - R ** 2 * v1 ** 2 + R ** 2 * v2 ** 2 - 2 * R * v1 ** 2 * wc + 2 * R * v2 ** 2 * wc + 4 * c ** 2 * v1 ** 2 - v1 ** 2 * wc ** 2 + v2 ** 2 * wc ** 2) ** (
                                                                                                             1 / 2) + 2 * R * v1 ** 2 * wc - 2 * R * v2 ** 2 * wc) ** 2 / (
                                                                                                     4 * c ** 2 * v1 ** 4) - (
                                                                                                     v1 ** 2 * (
                                                                                                     v2 ** 2 / v1 ** 2 - 1) * (
                                                                                                             (
                                                                                                                     R + wc) ** 2 - c ** 2 + (
                                                                                                                     c - (
                                                                                                                     v1 ** 2 * wc ** 2 - v2 ** 2 * wc ** 2 + R ** 2 * v1 ** 2 - R ** 2 * v2 ** 2 + R * v2 * (
                                                                                                                     - R ** 2 * v1 ** 2 + R ** 2 * v2 ** 2 - 2 * R * v1 ** 2 * wc + 2 * R * v2 ** 2 * wc + 4 * c ** 2 * v1 ** 2 - v1 ** 2 * wc ** 2 + v2 ** 2 * wc ** 2) ** (
                                                                                                                             1 / 2) + v2 * wc * (
                                                                                                                             - R ** 2 * v1 ** 2 + R ** 2 * v2 ** 2 - 2 * R * v1 ** 2 * wc + 2 * R * v2 ** 2 * wc + 4 * c ** 2 * v1 ** 2 - v1 ** 2 * wc ** 2 + v2 ** 2 * wc ** 2) ** (
                                                                                                                             1 / 2) + 2 * R * v1 ** 2 * wc - 2 * R * v2 ** 2 * wc) / (
                                                                                                                             2 * c * v1 ** 2)) ** 2 - (
                                                                                                                     v1 ** 2 * wc ** 2 - v2 ** 2 * wc ** 2 + R ** 2 * v1 ** 2 - R ** 2 * v2 ** 2 + R * v2 * (
                                                                                                                     - R ** 2 * v1 ** 2 + R ** 2 * v2 ** 2 - 2 * R * v1 ** 2 * wc + 2 * R * v2 ** 2 * wc + 4 * c ** 2 * v1 ** 2 - v1 ** 2 * wc ** 2 + v2 ** 2 * wc ** 2) ** (
                                                                                                                             1 / 2) + v2 * wc * (
                                                                                                                             - R ** 2 * v1 ** 2 + R ** 2 * v2 ** 2 - 2 * R * v1 ** 2 * wc + 2 * R * v2 ** 2 * wc + 4 * c ** 2 * v1 ** 2 - v1 ** 2 * wc ** 2 + v2 ** 2 * wc ** 2) ** (
                                                                                                                             1 / 2) + 2 * R * v1 ** 2 * wc - 2 * R * v2 ** 2 * wc) ** 2 / (
                                                                                                                     4 * c ** 2 * v1 ** 4)) ** 2) / (
                                                                                                     4 * c ** 2 * v2 ** 2)) ** (
                                                  1 / 2) / v2)) / (v1 - v2)
    max_alpha = -np.arctan((v1 ** 3 * (1 - v2 ** 2 / v1 ** 2) ** (1 / 2) * ((R + wc) ** 2 - c ** 2 + (c - (
            v1 ** 2 * wc ** 2 - v2 ** 2 * wc ** 2 + R ** 2 * v1 ** 2 - R ** 2 * v2 ** 2 + R * v2 * (
            - R ** 2 * v1 ** 2 + R ** 2 * v2 ** 2 - 2 * R * v1 ** 2 * wc + 2 * R * v2 ** 2 * wc + 4 * c ** 2 * v1 ** 2 - v1 ** 2 * wc ** 2 + v2 ** 2 * wc ** 2) ** (
                    1 / 2) + v2 * wc * (
                    - R ** 2 * v1 ** 2 + R ** 2 * v2 ** 2 - 2 * R * v1 ** 2 * wc + 2 * R * v2 ** 2 * wc + 4 * c ** 2 * v1 ** 2 - v1 ** 2 * wc ** 2 + v2 ** 2 * wc ** 2) ** (
                    1 / 2) + 2 * R * v1 ** 2 * wc - 2 * R * v2 ** 2 * wc) / (2 * c * v1 ** 2)) ** 2 - (
                                                                                    v1 ** 2 * wc ** 2 - v2 ** 2 * wc ** 2 + R ** 2 * v1 ** 2 - R ** 2 * v2 ** 2 + R * v2 * (
                                                                                    - R ** 2 * v1 ** 2 + R ** 2 * v2 ** 2 - 2 * R * v1 ** 2 * wc + 2 * R * v2 ** 2 * wc + 4 * c ** 2 * v1 ** 2 - v1 ** 2 * wc ** 2 + v2 ** 2 * wc ** 2) ** (
                                                                                            1 / 2) + v2 * wc * (
                                                                                            - R ** 2 * v1 ** 2 + R ** 2 * v2 ** 2 - 2 * R * v1 ** 2 * wc + 2 * R * v2 ** 2 * wc + 4 * c ** 2 * v1 ** 2 - v1 ** 2 * wc ** 2 + v2 ** 2 * wc ** 2) ** (
                                                                                            1 / 2) + 2 * R * v1 ** 2 * wc - 2 * R * v2 ** 2 * wc) ** 2 / (
                                                                                    4 * c ** 2 * v1 ** 4))) / (
                                   v2 * (
                                   v1 ** 2 * wc ** 2 - v2 ** 2 * wc ** 2 + R ** 2 * v1 ** 2 - R ** 2 * v2 ** 2 + R * v2 * (
                                   - R ** 2 * v1 ** 2 + R ** 2 * v2 ** 2 - 2 * R * v1 ** 2 * wc + 2 * R * v2 ** 2 * wc + 4 * c ** 2 * v1 ** 2 - v1 ** 2 * wc ** 2 + v2 ** 2 * wc ** 2) ** (
                                           1 / 2) + v2 * wc * (
                                           - R ** 2 * v1 ** 2 + R ** 2 * v2 ** 2 - 2 * R * v1 ** 2 * wc + 2 * R * v2 ** 2 * wc + 4 * c ** 2 * v1 ** 2 - v1 ** 2 * wc ** 2 + v2 ** 2 * wc ** 2) ** (
                                           1 / 2) + 2 * R * v1 ** 2 * wc - 2 * R * v2 ** 2 * wc)))
    return z0, r0, max_alpha
